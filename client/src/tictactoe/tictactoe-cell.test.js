import ReactTestUtils from 'react-addons-test-utils';
import TictactoeBoardModule from './TictactoeBoard';
import ReactDOM from 'react-dom';
import React from 'react';
import { shallow } from 'enzyme';

import TicCellComponent from'./TicCell';

import MessageRouter from '../common/framework/message-router';

describe("Tic Cell", function () {

    var div, component, TicCell;

    var commandRouter = MessageRouter(inject({}));
    var eventRouter = MessageRouter(inject({}));
    var commandsReceived=[];
    var time = new Date().getTime();
    var event = {}
    commandRouter.on("*", function(cmd){
        commandsReceived.push(cmd);
    } );

    beforeEach(function () {
        commandsReceived.length=0;  time = new Date().getTime();
        event = {
            commandId: time,
            gameId: "youyouid",
            type: "MovePlaced",
            placement: 3,
            timeStamp: time,
            side: 'X'
        }
        TicCell = TicCellComponent(inject({
            generateUUID:()=>{
                return "youyouid"
            },
            commandPort: commandRouter,
            eventRouter
        }));

        div = document.createElement('div');

        component = shallow(<TicCell coordinates={{ x:0, y:1}} gameId={event.gameId} mySide="X"/>, div);

    });

    it('should render without error', function () {

    });

    it('should record move with matching game id and coordinates ',function(){
          time = new Date().getTime();
          event = {
              commandId: time,
              gameId: "youyouid",
              type: "MovePlaced",
              placement: 3,
              timeStamp: time,
              side: 'X'
          }
          eventRouter.routeMessage(event);
          expect(component.state("value")).toBe("X");
    });

    it('should ignore move with matching gameId but not coordinates',function(){
        time = new Date().getTime();
        event = {
            commandId: time,
            gameId: "youyouid",
            type: "MovePlaced",
            placement: 2,
            timeStamp: time,
            side: 'X'
        }
        eventRouter.routeMessage(event)
        expect(component.state("value")).toBe(undefined);
    });

    it('should ignore move with matching coordinates, but not matching gameId',function(){
        time = new Date().getTime();
        event = {
            commandId: time,
            gameId: "babla",
            type: "MovePlaced",
            placement: 3,
            timeStamp: time,
            side: 'X'
        }
        eventRouter.routeMessage(event)
        expect(component.state("value")).toBe(undefined);
    });

    it('should issue PlaceMove command with gameId, mySide and coordinates when clicked', ()=>{
        component.find('div').simulate('click');
        expect(commandsReceived[0].commandId).toBe("youyouid");
        expect(commandsReceived[0].gameId).toBe("youyouid");
        expect(commandsReceived[0].type).toBe("PlaceMove");
        expect(commandsReceived[0].placement).toBe(3);
        expect(commandsReceived[0].side).toBe("X");

        //needed to test each seperately since the timestamp generated by me was
        //milliseconds from the click timestamp

        //.. check whether correct command was dispatched through command router
    });
});
